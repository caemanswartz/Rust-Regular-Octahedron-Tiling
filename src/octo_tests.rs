#[cfg(test)]
use crate::{
    octo::Octo,
    tile::Direction
};
#[test]
fn test_step_size_1() -> Result <(),String> {
    let octo = Octo::new(1);
    assert_eq!(octo.step((0, Direction::PosX)), (2, Direction::NegX));
    assert_eq!(octo.step((1, Direction::PosX)), (3, Direction::NegX));
    assert_eq!(octo.step((2, Direction::PosX)), (0, Direction::NegX));
    assert_eq!(octo.step((3, Direction::PosX)), (1, Direction::NegX));
    assert_eq!(octo.step((4, Direction::PosX)), (3, Direction::PosX));
    assert_eq!(octo.step((5, Direction::PosX)), (2, Direction::PosX));
    assert_eq!(octo.step((6, Direction::PosX)), (1, Direction::PosX));
    assert_eq!(octo.step((7, Direction::PosX)), (0, Direction::PosX));
    assert_eq!(octo.step((4, Direction::NegX)), (6, Direction::PosX));
    assert_eq!(octo.step((5, Direction::NegX)), (7, Direction::PosX));
    assert_eq!(octo.step((6, Direction::NegX)), (4, Direction::PosX));
    assert_eq!(octo.step((7, Direction::NegX)), (5, Direction::PosX));
    assert_eq!(octo.step((3, Direction::NegX)), (4, Direction::NegX));
    assert_eq!(octo.step((2, Direction::NegX)), (5, Direction::NegX));
    assert_eq!(octo.step((1, Direction::NegX)), (6, Direction::NegX));
    assert_eq!(octo.step((0, Direction::NegX)), (7, Direction::NegX));
    assert_eq!(octo.step((0, Direction::PosY)), (1, Direction::PosZ));
    assert_eq!(octo.step((1, Direction::PosY)), (2, Direction::PosZ));
    assert_eq!(octo.step((2, Direction::PosY)), (3, Direction::PosZ));
    assert_eq!(octo.step((3, Direction::PosY)), (0, Direction::PosZ));
    assert_eq!(octo.step((4, Direction::PosY)), (0, Direction::PosY));
    assert_eq!(octo.step((5, Direction::PosY)), (3, Direction::PosY));
    assert_eq!(octo.step((6, Direction::PosY)), (2, Direction::PosY));
    assert_eq!(octo.step((7, Direction::PosY)), (1, Direction::PosY));
    assert_eq!(octo.step((0, Direction::NegY)), (4, Direction::NegY));
    assert_eq!(octo.step((1, Direction::NegY)), (7, Direction::NegY));
    assert_eq!(octo.step((2, Direction::NegY)), (6, Direction::NegY));
    assert_eq!(octo.step((3, Direction::NegY)), (5, Direction::NegY));
    assert_eq!(octo.step((4, Direction::NegY)), (5, Direction::NegZ));
    assert_eq!(octo.step((7, Direction::NegY)), (4, Direction::NegZ));
    assert_eq!(octo.step((6, Direction::NegY)), (7, Direction::NegZ));
    assert_eq!(octo.step((5, Direction::NegY)), (6, Direction::NegZ));
    assert_eq!(octo.step((0, Direction::PosZ)), (6, Direction::PosZ));
    assert_eq!(octo.step((1, Direction::PosZ)), (5, Direction::PosZ));
    assert_eq!(octo.step((2, Direction::PosZ)), (4, Direction::PosZ));
    assert_eq!(octo.step((3, Direction::PosZ)), (7, Direction::PosZ));
    assert_eq!(octo.step((4, Direction::PosZ)), (7, Direction::PosY));
    assert_eq!(octo.step((7, Direction::PosZ)), (6, Direction::PosY));
    assert_eq!(octo.step((6, Direction::PosZ)), (5, Direction::PosY));
    assert_eq!(octo.step((5, Direction::PosZ)), (4, Direction::PosY));
    assert_eq!(octo.step((0, Direction::NegZ)), (3, Direction::NegY));
    assert_eq!(octo.step((1, Direction::NegZ)), (0, Direction::NegY));
    assert_eq!(octo.step((2, Direction::NegZ)), (1, Direction::NegY));
    assert_eq!(octo.step((3, Direction::NegZ)), (2, Direction::NegY));
    assert_eq!(octo.step((6, Direction::NegZ)), (0, Direction::NegZ));
    assert_eq!(octo.step((5, Direction::NegZ)), (1, Direction::NegZ));
    assert_eq!(octo.step((4, Direction::NegZ)), (2, Direction::NegZ));
    assert_eq!(octo.step((7, Direction::NegZ)), (3, Direction::NegZ));
    Ok(())
}
#[test]
fn test_step_size_2() -> Result <(),String> {
    let octo = Octo::new(2);
    assert_eq!(octo.step((0, Direction::PosX)), (8, Direction::NegX));
    assert_eq!(octo.step((1, Direction::PosX)), (12, Direction::NegZ));
    assert_eq!(octo.step((2, Direction::PosX)), (0, Direction::PosX));
    assert_eq!(octo.step((3, Direction::PosX)), (4, Direction::PosY));
    assert_eq!(octo.step((4, Direction::PosX)), (12, Direction::NegX));
    assert_eq!(octo.step((5, Direction::PosX)), (0, Direction::NegZ));
    assert_eq!(octo.step((6, Direction::PosX)), (4, Direction::PosX));
    assert_eq!(octo.step((7, Direction::PosX)), (8, Direction::PosY));
    assert_eq!(octo.step((8, Direction::PosX)), (0, Direction::NegX));
    assert_eq!(octo.step((9, Direction::PosX)), (4, Direction::NegZ));
    assert_eq!(octo.step((10, Direction::PosX)), (8, Direction::PosX));
    assert_eq!(octo.step((11, Direction::PosX)), (12, Direction::PosY));
    assert_eq!(octo.step((12, Direction::PosX)), (4, Direction::NegX));
    assert_eq!(octo.step((13, Direction::PosX)), (8, Direction::NegZ));
    assert_eq!(octo.step((14, Direction::PosX)), (12, Direction::PosX));
    assert_eq!(octo.step((15, Direction::PosX)), (0, Direction::PosY));
    assert_eq!(octo.step((31, Direction::PosX)), (1, Direction::PosX));
    assert_eq!(octo.step((30, Direction::PosX)), (2, Direction::PosX));
    assert_eq!(octo.step((29, Direction::PosX)), (3, Direction::PosX));
    assert_eq!(octo.step((28, Direction::PosX)), (30, Direction::PosX));
    assert_eq!(octo.step((27, Direction::PosX)), (5, Direction::PosX));
    assert_eq!(octo.step((26, Direction::PosX)), (6, Direction::PosX));
    assert_eq!(octo.step((25, Direction::PosX)), (7, Direction::PosX));
    assert_eq!(octo.step((24, Direction::PosX)), (26, Direction::PosX));
    assert_eq!(octo.step((23, Direction::PosX)), (9, Direction::PosX));
    assert_eq!(octo.step((22, Direction::PosX)), (10, Direction::PosX));
    assert_eq!(octo.step((21, Direction::PosX)), (11, Direction::PosX));
    assert_eq!(octo.step((20, Direction::PosX)), (22, Direction::PosX));
    assert_eq!(octo.step((19, Direction::PosX)), (13, Direction::PosX));
    assert_eq!(octo.step((18, Direction::PosX)), (14, Direction::PosX));
    assert_eq!(octo.step((17, Direction::PosX)), (15, Direction::PosX));
    assert_eq!(octo.step((16, Direction::PosX)), (18, Direction::PosX));
    assert_eq!(octo.step((0, Direction::NegX)), (2, Direction::NegX));
    assert_eq!(octo.step((1, Direction::NegX)), (31, Direction::NegX));
    assert_eq!(octo.step((2, Direction::NegX)), (30, Direction::NegX));
    assert_eq!(octo.step((3, Direction::NegX)), (29, Direction::NegX));
    assert_eq!(octo.step((4, Direction::NegX)), (6, Direction::NegX));
    assert_eq!(octo.step((5, Direction::NegX)), (27, Direction::NegX));
    assert_eq!(octo.step((6, Direction::NegX)), (26, Direction::NegX));
    assert_eq!(octo.step((7, Direction::NegX)), (25, Direction::NegX));
    assert_eq!(octo.step((8, Direction::NegX)), (10, Direction::NegX));
    assert_eq!(octo.step((9, Direction::NegX)), (23, Direction::NegX));
    assert_eq!(octo.step((10, Direction::NegX)), (22, Direction::NegX));
    assert_eq!(octo.step((11, Direction::NegX)), (21, Direction::NegX));
    assert_eq!(octo.step((12, Direction::NegX)), (14, Direction::NegX));
    assert_eq!(octo.step((13, Direction::NegX)), (19, Direction::NegX));
    assert_eq!(octo.step((14, Direction::NegX)), (18, Direction::NegX));
    assert_eq!(octo.step((15, Direction::NegX)), (17, Direction::NegX));
    assert_eq!(octo.step((16, Direction::NegX)), (24, Direction::PosX));
    assert_eq!(octo.step((17, Direction::NegX)), (28, Direction::PosZ));
    assert_eq!(octo.step((18, Direction::NegX)), (16, Direction::NegX));
    assert_eq!(octo.step((19, Direction::NegX)), (20, Direction::NegY));
    assert_eq!(octo.step((20, Direction::NegX)), (28, Direction::PosX));
    assert_eq!(octo.step((21, Direction::NegX)), (16, Direction::PosZ));
    assert_eq!(octo.step((22, Direction::NegX)), (20, Direction::NegX));
    assert_eq!(octo.step((23, Direction::NegX)), (24, Direction::NegY));
    assert_eq!(octo.step((24, Direction::NegX)), (16, Direction::PosX));
    assert_eq!(octo.step((25, Direction::NegX)), (20, Direction::PosZ));
    assert_eq!(octo.step((26, Direction::NegX)), (24, Direction::NegX));
    assert_eq!(octo.step((27, Direction::NegX)), (28, Direction::NegY));
    assert_eq!(octo.step((28, Direction::NegX)), (20, Direction::PosX));
    assert_eq!(octo.step((29, Direction::NegX)), (24, Direction::PosZ));
    assert_eq!(octo.step((30, Direction::NegX)), (28, Direction::NegX));
    assert_eq!(octo.step((31, Direction::NegX)), (16, Direction::NegY));
    assert_eq!(octo.step((0, Direction::PosY)), (4, Direction::PosZ));
    assert_eq!(octo.step((1, Direction::PosY)), (2, Direction::PosY));
    assert_eq!(octo.step((2, Direction::PosY)), (6, Direction::PosZ));
    assert_eq!(octo.step((3, Direction::PosY)), (5, Direction::PosZ));
    assert_eq!(octo.step((4, Direction::PosY)), (8, Direction::PosZ));
    assert_eq!(octo.step((5, Direction::PosY)), (6, Direction::PosY));
    assert_eq!(octo.step((6, Direction::PosY)), (10, Direction::PosZ));
    assert_eq!(octo.step((7, Direction::PosY)), (9, Direction::PosZ));
    assert_eq!(octo.step((8, Direction::PosY)), (12, Direction::PosZ));
    assert_eq!(octo.step((9, Direction::PosY)), (10, Direction::PosY));
    assert_eq!(octo.step((10, Direction::PosY)), (14, Direction::PosZ));
    assert_eq!(octo.step((11, Direction::PosY)), (13, Direction::PosZ));
    assert_eq!(octo.step((12, Direction::PosY)), (0, Direction::PosZ));
    assert_eq!(octo.step((13, Direction::PosY)), (14, Direction::PosY));
    assert_eq!(octo.step((14, Direction::PosY)), (2, Direction::PosZ));
    assert_eq!(octo.step((15, Direction::PosY)), (1, Direction::PosZ));
    assert_eq!(octo.step((16, Direction::PosY)), (31, Direction::PosX));
    assert_eq!(octo.step((17, Direction::PosY)), (1, Direction::PosY));
    assert_eq!(octo.step((18, Direction::PosY)), (17, Direction::PosY));
    assert_eq!(octo.step((19, Direction::PosY)), (15, Direction::PosY));
    assert_eq!(octo.step((20, Direction::PosY)), (19, Direction::PosX));
    assert_eq!(octo.step((21, Direction::PosY)), (13, Direction::PosY));
    assert_eq!(octo.step((22, Direction::PosY)), (21, Direction::PosY));
    assert_eq!(octo.step((23, Direction::PosY)), (11, Direction::PosY));
    assert_eq!(octo.step((24, Direction::PosY)), (23, Direction::PosX));
    assert_eq!(octo.step((25, Direction::PosY)), (9, Direction::PosY));
    assert_eq!(octo.step((26, Direction::PosY)), (25, Direction::PosY));
    assert_eq!(octo.step((27, Direction::PosY)), (7, Direction::PosY));
    assert_eq!(octo.step((28, Direction::PosY)), (27, Direction::PosX));
    assert_eq!(octo.step((29, Direction::PosY)), (5, Direction::PosY));
    assert_eq!(octo.step((30, Direction::PosY)), (29, Direction::PosY));
    assert_eq!(octo.step((31, Direction::PosY)), (3, Direction::PosY));
    assert_eq!(octo.step((0, Direction::NegY)), (15, Direction::NegX));
    assert_eq!(octo.step((1, Direction::NegY)), (17, Direction::NegY));
    assert_eq!(octo.step((2, Direction::NegY)), (1, Direction::NegY));
    assert_eq!(octo.step((3, Direction::NegY)), (31, Direction::NegY));
    assert_eq!(octo.step((4, Direction::NegY)), (3, Direction::NegX));
    assert_eq!(octo.step((5, Direction::NegY)), (29, Direction::NegY));
    assert_eq!(octo.step((6, Direction::NegY)), (5, Direction::NegY));
    assert_eq!(octo.step((7, Direction::NegY)), (27, Direction::NegY));
    assert_eq!(octo.step((8, Direction::NegY)), (7, Direction::NegX));
    assert_eq!(octo.step((9, Direction::NegY)), (25, Direction::NegY));
    assert_eq!(octo.step((10, Direction::NegY)), (9, Direction::NegY));
    assert_eq!(octo.step((11, Direction::NegY)), (23, Direction::NegY));
    assert_eq!(octo.step((12, Direction::NegY)), (11, Direction::NegX));
    assert_eq!(octo.step((13, Direction::NegY)), (21, Direction::NegY));
    assert_eq!(octo.step((14, Direction::NegY)), (13, Direction::NegY));
    assert_eq!(octo.step((15, Direction::NegY)), (19, Direction::NegY));
    assert_eq!(octo.step((16, Direction::NegY)), (20, Direction::NegZ));
    assert_eq!(octo.step((17, Direction::NegY)), (18, Direction::NegY));
    assert_eq!(octo.step((18, Direction::NegY)), (22, Direction::NegZ));
    assert_eq!(octo.step((19, Direction::NegY)), (21, Direction::NegZ));
    assert_eq!(octo.step((20, Direction::NegY)), (24, Direction::NegZ));
    assert_eq!(octo.step((21, Direction::NegY)), (22, Direction::NegY));
    assert_eq!(octo.step((22, Direction::NegY)), (26, Direction::NegZ));
    assert_eq!(octo.step((23, Direction::NegY)), (25, Direction::NegZ));
    assert_eq!(octo.step((24, Direction::NegY)), (28, Direction::NegZ));
    assert_eq!(octo.step((25, Direction::NegY)), (26, Direction::NegY));
    assert_eq!(octo.step((26, Direction::NegY)), (30, Direction::NegZ));
    assert_eq!(octo.step((27, Direction::NegY)), (29, Direction::NegZ));
    assert_eq!(octo.step((28, Direction::NegY)), (16, Direction::NegZ));
    assert_eq!(octo.step((29, Direction::NegY)), (30, Direction::NegY));
    assert_eq!(octo.step((30, Direction::NegY)), (18, Direction::NegZ));
    assert_eq!(octo.step((31, Direction::NegY)), (17, Direction::NegZ));
    assert_eq!(octo.step((0, Direction::PosZ)), (5, Direction::NegX));
    assert_eq!(octo.step((1, Direction::PosZ)), (29, Direction::PosZ));
    assert_eq!(octo.step((2, Direction::PosZ)), (3, Direction::PosZ));
    assert_eq!(octo.step((3, Direction::PosZ)), (27, Direction::PosZ));
    assert_eq!(octo.step((4, Direction::PosZ)), (9, Direction::NegX));
    assert_eq!(octo.step((5, Direction::PosZ)), (25, Direction::PosZ));
    assert_eq!(octo.step((6, Direction::PosZ)), (7, Direction::PosZ));
    assert_eq!(octo.step((7, Direction::PosZ)), (23, Direction::PosZ));
    assert_eq!(octo.step((8, Direction::PosZ)), (13, Direction::NegX));
    assert_eq!(octo.step((9, Direction::PosZ)), (21, Direction::PosZ));
    assert_eq!(octo.step((10, Direction::PosZ)), (11, Direction::PosZ));
    assert_eq!(octo.step((11, Direction::PosZ)), (19, Direction::PosZ));
    assert_eq!(octo.step((12, Direction::PosZ)), (1, Direction::NegX));
    assert_eq!(octo.step((13, Direction::PosZ)), (17, Direction::PosZ));
    assert_eq!(octo.step((14, Direction::PosZ)), (15, Direction::PosZ));
    assert_eq!(octo.step((15, Direction::PosZ)), (31, Direction::PosZ));
    assert_eq!(octo.step((16, Direction::PosZ)), (28, Direction::PosY));
    assert_eq!(octo.step((17, Direction::PosZ)), (31, Direction::PosY));
    assert_eq!(octo.step((18, Direction::PosZ)), (30, Direction::PosY));
    assert_eq!(octo.step((19, Direction::PosZ)), (18, Direction::PosZ));
    assert_eq!(octo.step((20, Direction::PosZ)), (16, Direction::PosY));
    assert_eq!(octo.step((21, Direction::PosZ)), (19, Direction::PosY));
    assert_eq!(octo.step((22, Direction::PosZ)), (18, Direction::PosY));
    assert_eq!(octo.step((23, Direction::PosZ)), (22, Direction::PosZ));
    assert_eq!(octo.step((24, Direction::PosZ)), (20, Direction::PosY));
    assert_eq!(octo.step((25, Direction::PosZ)), (23, Direction::PosY));
    assert_eq!(octo.step((26, Direction::PosZ)), (22, Direction::PosY));
    assert_eq!(octo.step((27, Direction::PosZ)), (26, Direction::PosZ));
    assert_eq!(octo.step((28, Direction::PosZ)), (24, Direction::PosY));
    assert_eq!(octo.step((29, Direction::PosZ)), (27, Direction::PosY));
    assert_eq!(octo.step((30, Direction::PosZ)), (26, Direction::PosY));
    assert_eq!(octo.step((31, Direction::PosZ)), (30, Direction::PosZ));
    assert_eq!(octo.step((1, Direction::NegZ)), (15, Direction::NegY));
    assert_eq!(octo.step((2, Direction::NegZ)), (14, Direction::NegY));
    assert_eq!(octo.step((3, Direction::NegZ)), (2, Direction::NegZ));
    assert_eq!(octo.step((4, Direction::NegZ)), (0, Direction::NegY));
    assert_eq!(octo.step((5, Direction::NegZ)), (3, Direction::NegY));
    assert_eq!(octo.step((6, Direction::NegZ)), (2, Direction::NegY));
    assert_eq!(octo.step((7, Direction::NegZ)), (6, Direction::NegZ));
    assert_eq!(octo.step((8, Direction::NegZ)), (4, Direction::NegY));
    assert_eq!(octo.step((9, Direction::NegZ)), (7, Direction::NegY));
    assert_eq!(octo.step((10, Direction::NegZ)), (6, Direction::NegY));
    assert_eq!(octo.step((11, Direction::NegZ)), (10, Direction::NegZ));
    assert_eq!(octo.step((12, Direction::NegZ)), (8, Direction::NegY));
    assert_eq!(octo.step((13, Direction::NegZ)), (11, Direction::NegY));
    assert_eq!(octo.step((14, Direction::NegZ)), (10, Direction::NegY));
    assert_eq!(octo.step((15, Direction::NegZ)), (14, Direction::NegZ));
    assert_eq!(octo.step((16, Direction::NegZ)), (21, Direction::PosX));
    assert_eq!(octo.step((17, Direction::NegZ)), (13, Direction::NegZ));
    assert_eq!(octo.step((18, Direction::NegZ)), (19, Direction::NegZ));
    assert_eq!(octo.step((19, Direction::NegZ)), (11, Direction::NegZ));
    assert_eq!(octo.step((20, Direction::NegZ)), (25, Direction::PosX));
    assert_eq!(octo.step((21, Direction::NegZ)), (9, Direction::NegZ));
    assert_eq!(octo.step((22, Direction::NegZ)), (23, Direction::NegZ));
    assert_eq!(octo.step((23, Direction::NegZ)), (7, Direction::NegZ));
    assert_eq!(octo.step((24, Direction::NegZ)), (29, Direction::PosX));
    assert_eq!(octo.step((25, Direction::NegZ)), (5, Direction::NegZ));
    assert_eq!(octo.step((26, Direction::NegZ)), (27, Direction::NegZ));
    assert_eq!(octo.step((27, Direction::NegZ)), (3, Direction::NegZ));
    assert_eq!(octo.step((28, Direction::NegZ)), (17, Direction::PosX));
    assert_eq!(octo.step((29, Direction::NegZ)), (1, Direction::NegZ));
    assert_eq!(octo.step((30, Direction::NegZ)), (31, Direction::NegZ));
    assert_eq!(octo.step((31, Direction::NegZ)), (15, Direction::NegZ));
    Ok(())
}
#[test]
fn test_step_size_3() -> Result <(),String> {
    let octo = Octo::new(3);
    assert_eq!(octo.step((0, Direction::PosX)), (18, Direction::NegX));
    assert_eq!(octo.step((1, Direction::PosX)), (27, Direction::NegZ));
    assert_eq!(octo.step((2, Direction::PosX)), (0, Direction::PosX));
    assert_eq!(octo.step((3, Direction::PosX)), (9, Direction::PosY));
    assert_eq!(octo.step((4, Direction::PosX)), (30, Direction::NegZ));
    assert_eq!(octo.step((5, Direction::PosX)), (1, Direction::PosX));
    assert_eq!(octo.step((6, Direction::PosX)), (2, Direction::PosX));
    assert_eq!(octo.step((7, Direction::PosX)), (3, Direction::PosX));
    assert_eq!(octo.step((8, Direction::PosX)), (10, Direction::PosY));
    assert_eq!(octo.step((9, Direction::PosX)), (27, Direction::NegX));
    assert_eq!(octo.step((10, Direction::PosX)), (0, Direction::NegZ));
    assert_eq!(octo.step((11, Direction::PosX)), (9, Direction::PosX));
    assert_eq!(octo.step((12, Direction::PosX)), (18, Direction::PosY));
    assert_eq!(octo.step((13, Direction::PosX)), (3, Direction::NegZ));
    assert_eq!(octo.step((14, Direction::PosX)), (10, Direction::PosX));
    assert_eq!(octo.step((15, Direction::PosX)), (11, Direction::PosX));
    assert_eq!(octo.step((16, Direction::PosX)), (12, Direction::PosX));
    assert_eq!(octo.step((17, Direction::PosX)), (19, Direction::PosY));
    assert_eq!(octo.step((18, Direction::PosX)), (0, Direction::NegX));
    assert_eq!(octo.step((19, Direction::PosX)), (9, Direction::NegZ));
    assert_eq!(octo.step((20, Direction::PosX)), (18, Direction::PosX));
    assert_eq!(octo.step((21, Direction::PosX)), (27, Direction::PosY));
    assert_eq!(octo.step((22, Direction::PosX)), (12, Direction::NegZ));
    assert_eq!(octo.step((23, Direction::PosX)), (19, Direction::PosX));
    assert_eq!(octo.step((24, Direction::PosX)), (20, Direction::PosX));
    assert_eq!(octo.step((25, Direction::PosX)), (21, Direction::PosX));
    assert_eq!(octo.step((26, Direction::PosX)), (28, Direction::PosY));
    assert_eq!(octo.step((27, Direction::PosX)), (9, Direction::NegX));
    assert_eq!(octo.step((29, Direction::PosX)), (27, Direction::PosX));
    assert_eq!(octo.step((30, Direction::PosX)), (0, Direction::PosY));
    assert_eq!(octo.step((31, Direction::PosX)), (21, Direction::NegZ));
    assert_eq!(octo.step((32, Direction::PosX)), (28, Direction::PosX));
    assert_eq!(octo.step((33, Direction::PosX)), (29, Direction::PosX));
    assert_eq!(octo.step((34, Direction::PosX)), (30, Direction::PosX));
    assert_eq!(octo.step((35, Direction::PosX)), (1, Direction::PosY));
    assert_eq!(octo.step((36, Direction::PosX)), (38, Direction::PosX));
    assert_eq!(octo.step((37, Direction::PosX)), (41, Direction::PosX));
    assert_eq!(octo.step((38, Direction::PosX)), (42, Direction::PosX));
    assert_eq!(octo.step((39, Direction::PosX)), (43, Direction::PosX));
    assert_eq!(octo.step((40, Direction::PosX)), (35, Direction::PosX));
    assert_eq!(octo.step((41, Direction::PosX)), (34, Direction::PosX));
    assert_eq!(octo.step((42, Direction::PosX)), (33, Direction::PosX));
    assert_eq!(octo.step((43, Direction::PosX)), (32, Direction::PosX));
    assert_eq!(octo.step((44, Direction::PosX)), (31, Direction::PosX));
    assert_eq!(octo.step((45, Direction::PosX)), (47, Direction::PosX));
    assert_eq!(octo.step((46, Direction::PosX)), (50, Direction::PosX));
    assert_eq!(octo.step((47, Direction::PosX)), (51, Direction::PosX));
    assert_eq!(octo.step((48, Direction::PosX)), (52, Direction::PosX));
    assert_eq!(octo.step((49, Direction::PosX)), (26, Direction::PosX));
    assert_eq!(octo.step((50, Direction::PosX)), (25, Direction::PosX));
    assert_eq!(octo.step((51, Direction::PosX)), (24, Direction::PosX));
    assert_eq!(octo.step((52, Direction::PosX)), (23, Direction::PosX));
    assert_eq!(octo.step((53, Direction::PosX)), (22, Direction::PosX));
    assert_eq!(octo.step((54, Direction::PosX)), (56, Direction::PosX));
    assert_eq!(octo.step((55, Direction::PosX)), (59, Direction::PosX));
    assert_eq!(octo.step((56, Direction::PosX)), (60, Direction::PosX));
    assert_eq!(octo.step((57, Direction::PosX)), (61, Direction::PosX));
    assert_eq!(octo.step((58, Direction::PosX)), (17, Direction::PosX));
    assert_eq!(octo.step((59, Direction::PosX)), (16, Direction::PosX));
    assert_eq!(octo.step((60, Direction::PosX)), (15, Direction::PosX));
    assert_eq!(octo.step((61, Direction::PosX)), (14, Direction::PosX));
    assert_eq!(octo.step((62, Direction::PosX)), (13, Direction::PosX));
    assert_eq!(octo.step((63, Direction::PosX)), (65, Direction::PosX));
    assert_eq!(octo.step((64, Direction::PosX)), (68, Direction::PosX));
    assert_eq!(octo.step((65, Direction::PosX)), (69, Direction::PosX));
    assert_eq!(octo.step((66, Direction::PosX)), (70, Direction::PosX));
    assert_eq!(octo.step((67, Direction::PosX)), (8, Direction::PosX));
    assert_eq!(octo.step((68, Direction::PosX)), (7, Direction::PosX));
    assert_eq!(octo.step((69, Direction::PosX)), (6, Direction::PosX));
    assert_eq!(octo.step((70, Direction::PosX)), (5, Direction::PosX));
    assert_eq!(octo.step((71, Direction::PosX)), (4, Direction::PosX));
    assert_eq!(octo.step((0, Direction::NegX)), (2, Direction::NegX));
    assert_eq!(octo.step((1, Direction::NegX)), (5, Direction::NegX));
    assert_eq!(octo.step((2, Direction::NegX)), (6, Direction::NegX));
    assert_eq!(octo.step((3, Direction::NegX)), (7, Direction::NegX));
    assert_eq!(octo.step((4, Direction::NegX)), (71, Direction::NegX));
    assert_eq!(octo.step((5, Direction::NegX)), (70, Direction::NegX));
    assert_eq!(octo.step((6, Direction::NegX)), (69, Direction::NegX));
    assert_eq!(octo.step((7, Direction::NegX)), (68, Direction::NegX));
    assert_eq!(octo.step((8, Direction::NegX)), (67, Direction::NegX));
    assert_eq!(octo.step((9, Direction::NegX)), (11, Direction::NegX));
    assert_eq!(octo.step((10, Direction::NegX)), (14, Direction::NegX));
    assert_eq!(octo.step((11, Direction::NegX)), (15, Direction::NegX));
    assert_eq!(octo.step((12, Direction::NegX)), (16, Direction::NegX));
    assert_eq!(octo.step((13, Direction::NegX)), (62, Direction::NegX));
    assert_eq!(octo.step((14, Direction::NegX)), (61, Direction::NegX));
    assert_eq!(octo.step((15, Direction::NegX)), (60, Direction::NegX));
    assert_eq!(octo.step((16, Direction::NegX)), (59, Direction::NegX));
    assert_eq!(octo.step((17, Direction::NegX)), (58, Direction::NegX));
    assert_eq!(octo.step((18, Direction::NegX)), (20, Direction::NegX));
    assert_eq!(octo.step((19, Direction::NegX)), (23, Direction::NegX));
    assert_eq!(octo.step((20, Direction::NegX)), (24, Direction::NegX));
    assert_eq!(octo.step((21, Direction::NegX)), (25, Direction::NegX));
    assert_eq!(octo.step((22, Direction::NegX)), (53, Direction::NegX));
    assert_eq!(octo.step((23, Direction::NegX)), (52, Direction::NegX));
    assert_eq!(octo.step((24, Direction::NegX)), (51, Direction::NegX));
    assert_eq!(octo.step((25, Direction::NegX)), (50, Direction::NegX));
    assert_eq!(octo.step((26, Direction::NegX)), (49, Direction::NegX));
    assert_eq!(octo.step((27, Direction::NegX)), (29, Direction::NegX));
    assert_eq!(octo.step((28, Direction::NegX)), (32, Direction::NegX));
    assert_eq!(octo.step((29, Direction::NegX)), (33, Direction::NegX));
    assert_eq!(octo.step((30, Direction::NegX)), (34, Direction::NegX));
    assert_eq!(octo.step((31, Direction::NegX)), (44, Direction::NegX));
    assert_eq!(octo.step((32, Direction::NegX)), (43, Direction::NegX));
    assert_eq!(octo.step((33, Direction::NegX)), (42, Direction::NegX));
    assert_eq!(octo.step((34, Direction::NegX)), (41, Direction::NegX));
    assert_eq!(octo.step((35, Direction::NegX)), (40, Direction::NegX));
    assert_eq!(octo.step((36, Direction::NegX)), (54, Direction::PosX));
    assert_eq!(octo.step((37, Direction::NegX)), (63, Direction::PosZ));
    assert_eq!(octo.step((38, Direction::NegX)), (36, Direction::NegX));
    assert_eq!(octo.step((39, Direction::NegX)), (45, Direction::NegY));
    assert_eq!(octo.step((40, Direction::NegX)), (66, Direction::PosZ));
    assert_eq!(octo.step((41, Direction::NegX)), (37, Direction::NegX));
    assert_eq!(octo.step((42, Direction::NegX)), (38, Direction::NegX));
    assert_eq!(octo.step((43, Direction::NegX)), (39, Direction::NegX));
    assert_eq!(octo.step((44, Direction::NegX)), (46, Direction::NegY));
    assert_eq!(octo.step((45, Direction::NegX)), (63, Direction::PosX));
    assert_eq!(octo.step((46, Direction::NegX)), (36, Direction::PosZ));
    assert_eq!(octo.step((47, Direction::NegX)), (45, Direction::NegX));
    assert_eq!(octo.step((48, Direction::NegX)), (54, Direction::NegY));
    assert_eq!(octo.step((49, Direction::NegX)), (39, Direction::PosZ));
    assert_eq!(octo.step((50, Direction::NegX)), (46, Direction::NegX));
    assert_eq!(octo.step((51, Direction::NegX)), (47, Direction::NegX));
    assert_eq!(octo.step((52, Direction::NegX)), (48, Direction::NegX));
    assert_eq!(octo.step((53, Direction::NegX)), (55, Direction::NegY));
    assert_eq!(octo.step((54, Direction::NegX)), (36, Direction::PosX));
    assert_eq!(octo.step((55, Direction::NegX)), (45, Direction::PosZ));
    assert_eq!(octo.step((56, Direction::NegX)), (54, Direction::NegX));
    assert_eq!(octo.step((57, Direction::NegX)), (63, Direction::NegY));
    assert_eq!(octo.step((58, Direction::NegX)), (48, Direction::PosZ));
    assert_eq!(octo.step((59, Direction::NegX)), (55, Direction::NegX));
    assert_eq!(octo.step((60, Direction::NegX)), (56, Direction::NegX));
    assert_eq!(octo.step((61, Direction::NegX)), (57, Direction::NegX));
    assert_eq!(octo.step((62, Direction::NegX)), (64, Direction::NegY));
    assert_eq!(octo.step((63, Direction::NegX)), (45, Direction::PosX));
    assert_eq!(octo.step((64, Direction::NegX)), (54, Direction::PosZ));
    assert_eq!(octo.step((65, Direction::NegX)), (63, Direction::NegX));
    assert_eq!(octo.step((66, Direction::NegX)), (36, Direction::NegY));
    assert_eq!(octo.step((67, Direction::NegX)), (57, Direction::PosZ));
    assert_eq!(octo.step((68, Direction::NegX)), (64, Direction::NegX));
    assert_eq!(octo.step((69, Direction::NegX)), (65, Direction::NegX));
    assert_eq!(octo.step((70, Direction::NegX)), (66, Direction::NegX));
    assert_eq!(octo.step((71, Direction::NegX)), (37, Direction::NegY));
    assert_eq!(octo.step((1, Direction::PosY)), (2, Direction::PosY));
    assert_eq!(octo.step((2, Direction::PosY)), (11, Direction::PosZ));
    assert_eq!(octo.step((3, Direction::PosY)), (10, Direction::PosZ));
    assert_eq!(octo.step((4, Direction::PosY)), (5, Direction::PosY));
    assert_eq!(octo.step((5, Direction::PosY)), (3, Direction::PosY));
    assert_eq!(octo.step((6, Direction::PosY)), (7, Direction::PosY));
    assert_eq!(octo.step((7, Direction::PosY)), (14, Direction::PosZ));
    assert_eq!(octo.step((8, Direction::PosY)), (13, Direction::PosZ));
    assert_eq!(octo.step((9, Direction::PosY)), (18, Direction::PosZ));
    assert_eq!(octo.step((10, Direction::PosY)), (11, Direction::PosY));
    assert_eq!(octo.step((11, Direction::PosY)), (20, Direction::PosZ));
    assert_eq!(octo.step((12, Direction::PosY)), (19, Direction::PosZ));
    assert_eq!(octo.step((13, Direction::PosY)), (14, Direction::PosY));
    assert_eq!(octo.step((14, Direction::PosY)), (12, Direction::PosY));
    assert_eq!(octo.step((15, Direction::PosY)), (16, Direction::PosY));
    assert_eq!(octo.step((16, Direction::PosY)), (23, Direction::PosZ));
    assert_eq!(octo.step((17, Direction::PosY)), (22, Direction::PosZ));
    assert_eq!(octo.step((18, Direction::PosY)), (27, Direction::PosZ));
    assert_eq!(octo.step((19, Direction::PosY)), (20, Direction::PosY));
    assert_eq!(octo.step((20, Direction::PosY)), (29, Direction::PosZ));
    assert_eq!(octo.step((21, Direction::PosY)), (28, Direction::PosZ));
    assert_eq!(octo.step((22, Direction::PosY)), (23, Direction::PosY));
    assert_eq!(octo.step((23, Direction::PosY)), (21, Direction::PosY));
    assert_eq!(octo.step((24, Direction::PosY)), (25, Direction::PosY));
    assert_eq!(octo.step((25, Direction::PosY)), (32, Direction::PosZ));
    assert_eq!(octo.step((26, Direction::PosY)), (31, Direction::PosZ));
    assert_eq!(octo.step((27, Direction::PosY)), (0, Direction::PosZ));
    assert_eq!(octo.step((28, Direction::PosY)), (29, Direction::PosY));
    assert_eq!(octo.step((29, Direction::PosY)), (2, Direction::PosZ));
    assert_eq!(octo.step((30, Direction::PosY)), (1, Direction::PosZ));
    assert_eq!(octo.step((31, Direction::PosY)), (32, Direction::PosY));
    assert_eq!(octo.step((32, Direction::PosY)), (30, Direction::PosY));
    assert_eq!(octo.step((33, Direction::PosY)), (34, Direction::PosY));
    assert_eq!(octo.step((34, Direction::PosY)), (5, Direction::PosZ));
    assert_eq!(octo.step((35, Direction::PosY)), (4, Direction::PosZ));
    assert_eq!(octo.step((36, Direction::PosY)), (66, Direction::PosX));
    assert_eq!(octo.step((37, Direction::PosY)), (71, Direction::PosX));
    assert_eq!(octo.step((38, Direction::PosY)), (37, Direction::PosY));
    assert_eq!(octo.step((39, Direction::PosY)), (41, Direction::PosY));
    assert_eq!(octo.step((40, Direction::PosY)), (4, Direction::PosY));
    assert_eq!(octo.step((41, Direction::PosY)), (40, Direction::PosY));
    assert_eq!(octo.step((42, Direction::PosY)), (35, Direction::PosY));
    assert_eq!(octo.step((43, Direction::PosY)), (42, Direction::PosY));
    assert_eq!(octo.step((44, Direction::PosY)), (33, Direction::PosY));
    assert_eq!(octo.step((45, Direction::PosY)), (39, Direction::PosX));
    assert_eq!(octo.step((46, Direction::PosY)), (44, Direction::PosX));
    assert_eq!(octo.step((47, Direction::PosY)), (46, Direction::PosY));
    assert_eq!(octo.step((48, Direction::PosY)), (50, Direction::PosY));
    assert_eq!(octo.step((49, Direction::PosY)), (31, Direction::PosY));
    assert_eq!(octo.step((50, Direction::PosY)), (49, Direction::PosY));
    assert_eq!(octo.step((51, Direction::PosY)), (26, Direction::PosY));
    assert_eq!(octo.step((52, Direction::PosY)), (51, Direction::PosY));
    assert_eq!(octo.step((53, Direction::PosY)), (24, Direction::PosY));
    assert_eq!(octo.step((54, Direction::PosY)), (48, Direction::PosX));
    assert_eq!(octo.step((55, Direction::PosY)), (53, Direction::PosX));
    assert_eq!(octo.step((56, Direction::PosY)), (55, Direction::PosY));
    assert_eq!(octo.step((57, Direction::PosY)), (59, Direction::PosY));
    assert_eq!(octo.step((58, Direction::PosY)), (22, Direction::PosY));
    assert_eq!(octo.step((59, Direction::PosY)), (58, Direction::PosY));
    assert_eq!(octo.step((60, Direction::PosY)), (17, Direction::PosY));
    assert_eq!(octo.step((61, Direction::PosY)), (60, Direction::PosY));
    assert_eq!(octo.step((62, Direction::PosY)), (15, Direction::PosY));
    assert_eq!(octo.step((63, Direction::PosY)), (57, Direction::PosX));
    assert_eq!(octo.step((64, Direction::PosY)), (62, Direction::PosX));
    assert_eq!(octo.step((65, Direction::PosY)), (64, Direction::PosY));
    assert_eq!(octo.step((66, Direction::PosY)), (68, Direction::PosY));
    assert_eq!(octo.step((67, Direction::PosY)), (13, Direction::PosY));
    assert_eq!(octo.step((68, Direction::PosY)), (67, Direction::PosY));
    assert_eq!(octo.step((69, Direction::PosY)), (8, Direction::PosY));
    assert_eq!(octo.step((70, Direction::PosY)), (69, Direction::PosY));
    assert_eq!(octo.step((71, Direction::PosY)), (6, Direction::PosY));
    assert_eq!(octo.step((0, Direction::NegY)), (30, Direction::NegX));
    assert_eq!(octo.step((1, Direction::NegY)), (35, Direction::NegX));
    assert_eq!(octo.step((2, Direction::NegY)), (1, Direction::NegY));
    assert_eq!(octo.step((3, Direction::NegY)), (5, Direction::NegY));
    assert_eq!(octo.step((4, Direction::NegY)), (40, Direction::NegY));
    assert_eq!(octo.step((5, Direction::NegY)), (4, Direction::NegY));
    assert_eq!(octo.step((6, Direction::NegY)), (71, Direction::NegY));
    assert_eq!(octo.step((8, Direction::NegY)), (69, Direction::NegY));
    assert_eq!(octo.step((7, Direction::NegY)), (6, Direction::NegY));
    assert_eq!(octo.step((9, Direction::NegY)), (3, Direction::NegX));
    assert_eq!(octo.step((10, Direction::NegY)), (8, Direction::NegX));
    assert_eq!(octo.step((11, Direction::NegY)), (10, Direction::NegY));
    assert_eq!(octo.step((12, Direction::NegY)), (14, Direction::NegY));
    assert_eq!(octo.step((13, Direction::NegY)), (67, Direction::NegY));
    assert_eq!(octo.step((14, Direction::NegY)), (13, Direction::NegY));
    assert_eq!(octo.step((15, Direction::NegY)), (62, Direction::NegY));
    assert_eq!(octo.step((16, Direction::NegY)), (15, Direction::NegY));
    assert_eq!(octo.step((17, Direction::NegY)), (60, Direction::NegY));
    assert_eq!(octo.step((18, Direction::NegY)), (12, Direction::NegX));
    assert_eq!(octo.step((19, Direction::NegY)), (17, Direction::NegX));
    assert_eq!(octo.step((20, Direction::NegY)), (19, Direction::NegY));
    assert_eq!(octo.step((21, Direction::NegY)), (23, Direction::NegY));
    assert_eq!(octo.step((22, Direction::NegY)), (58, Direction::NegY));
    assert_eq!(octo.step((23, Direction::NegY)), (22, Direction::NegY));
    assert_eq!(octo.step((24, Direction::NegY)), (53, Direction::NegY));
    assert_eq!(octo.step((25, Direction::NegY)), (24, Direction::NegY));
    assert_eq!(octo.step((26, Direction::NegY)), (51, Direction::NegY));
    assert_eq!(octo.step((27, Direction::NegY)), (21, Direction::NegX));
    assert_eq!(octo.step((28, Direction::NegY)), (26, Direction::NegX));
    assert_eq!(octo.step((29, Direction::NegY)), (28, Direction::NegY));
    assert_eq!(octo.step((30, Direction::NegY)), (32, Direction::NegY));
    assert_eq!(octo.step((31, Direction::NegY)), (49, Direction::NegY));
    assert_eq!(octo.step((32, Direction::NegY)), (31, Direction::NegY));
    assert_eq!(octo.step((33, Direction::NegY)), (44, Direction::NegY));
    assert_eq!(octo.step((34, Direction::NegY)), (33, Direction::NegY));
    assert_eq!(octo.step((35, Direction::NegY)), (42, Direction::NegY));
    assert_eq!(octo.step((36, Direction::NegY)), (45, Direction::NegZ));
    assert_eq!(octo.step((37, Direction::NegY)), (38, Direction::NegY));
    assert_eq!(octo.step((38, Direction::NegY)), (47, Direction::NegZ));
    assert_eq!(octo.step((39, Direction::NegY)), (46, Direction::NegZ));
    assert_eq!(octo.step((40, Direction::NegY)), (41, Direction::NegY));
    assert_eq!(octo.step((41, Direction::NegY)), (39, Direction::NegY));
    assert_eq!(octo.step((42, Direction::NegY)), (43, Direction::NegY));
    assert_eq!(octo.step((43, Direction::NegY)), (50, Direction::NegZ));
    assert_eq!(octo.step((44, Direction::NegY)), (49, Direction::NegZ));
    assert_eq!(octo.step((45, Direction::NegY)), (54, Direction::NegZ));
    assert_eq!(octo.step((46, Direction::NegY)), (47, Direction::NegY));
    assert_eq!(octo.step((47, Direction::NegY)), (56, Direction::NegZ));
    assert_eq!(octo.step((48, Direction::NegY)), (55, Direction::NegZ));
    assert_eq!(octo.step((49, Direction::NegY)), (50, Direction::NegY));
    assert_eq!(octo.step((50, Direction::NegY)), (48, Direction::NegY));
    assert_eq!(octo.step((51, Direction::NegY)), (52, Direction::NegY));
    assert_eq!(octo.step((52, Direction::NegY)), (59, Direction::NegZ));
    assert_eq!(octo.step((53, Direction::NegY)), (58, Direction::NegZ));
    assert_eq!(octo.step((54, Direction::NegY)), (63, Direction::NegZ));
    assert_eq!(octo.step((55, Direction::NegY)), (56, Direction::NegY));
    assert_eq!(octo.step((56, Direction::NegY)), (65, Direction::NegZ));
    assert_eq!(octo.step((57, Direction::NegY)), (64, Direction::NegZ));
    assert_eq!(octo.step((58, Direction::NegY)), (59, Direction::NegY));
    assert_eq!(octo.step((59, Direction::NegY)), (57, Direction::NegY));
    assert_eq!(octo.step((60, Direction::NegY)), (61, Direction::NegY));
    assert_eq!(octo.step((61, Direction::NegY)), (68, Direction::NegZ));
    assert_eq!(octo.step((62, Direction::NegY)), (67, Direction::NegZ));
    assert_eq!(octo.step((63, Direction::NegY)), (36, Direction::NegZ));
    assert_eq!(octo.step((64, Direction::NegY)), (65, Direction::NegY));
    assert_eq!(octo.step((65, Direction::NegY)), (38, Direction::NegZ));
    assert_eq!(octo.step((66, Direction::NegY)), (37, Direction::NegZ));
    assert_eq!(octo.step((67, Direction::NegY)), (68, Direction::NegY));
    assert_eq!(octo.step((68, Direction::NegY)), (66, Direction::NegY));
    assert_eq!(octo.step((69, Direction::NegY)), (70, Direction::NegY));
    assert_eq!(octo.step((70, Direction::NegY)), (41, Direction::NegZ));
    assert_eq!(octo.step((71, Direction::NegY)), (40, Direction::NegZ));
    assert_eq!(octo.step((0, Direction::PosZ)), (10, Direction::NegX));
    assert_eq!(octo.step((1, Direction::PosZ)), (7, Direction::PosZ));
    assert_eq!(octo.step((2, Direction::PosZ)), (3, Direction::PosZ));
    assert_eq!(octo.step((3, Direction::PosZ)), (13, Direction::NegX));
    assert_eq!(octo.step((4, Direction::PosZ)), (69, Direction::PosZ));
    assert_eq!(octo.step((5, Direction::PosZ)), (6, Direction::PosZ));
    assert_eq!(octo.step((6, Direction::PosZ)), (67, Direction::PosZ));
    assert_eq!(octo.step((7, Direction::PosZ)), (8, Direction::PosZ));
    assert_eq!(octo.step((8, Direction::PosZ)), (62, Direction::PosZ));
    assert_eq!(octo.step((9, Direction::PosZ)), (19, Direction::NegX));
    assert_eq!(octo.step((10, Direction::PosZ)), (16, Direction::PosZ));
    assert_eq!(octo.step((11, Direction::PosZ)), (12, Direction::PosZ));
    assert_eq!(octo.step((12, Direction::PosZ)), (22, Direction::NegX));
    assert_eq!(octo.step((13, Direction::PosZ)), (60, Direction::PosZ));
    assert_eq!(octo.step((14, Direction::PosZ)), (15, Direction::PosZ));
    assert_eq!(octo.step((15, Direction::PosZ)), (58, Direction::PosZ));
    assert_eq!(octo.step((16, Direction::PosZ)), (17, Direction::PosZ));
    assert_eq!(octo.step((17, Direction::PosZ)), (53, Direction::PosZ));
    assert_eq!(octo.step((18, Direction::PosZ)), (28, Direction::NegX));
    assert_eq!(octo.step((19, Direction::PosZ)), (25, Direction::PosZ));
    assert_eq!(octo.step((20, Direction::PosZ)), (21, Direction::PosZ));
    assert_eq!(octo.step((21, Direction::PosZ)), (31, Direction::NegX));
    assert_eq!(octo.step((22, Direction::PosZ)), (51, Direction::PosZ));
    assert_eq!(octo.step((23, Direction::PosZ)), (24, Direction::PosZ));
    assert_eq!(octo.step((24, Direction::PosZ)), (49, Direction::PosZ));
    assert_eq!(octo.step((25, Direction::PosZ)), (26, Direction::PosZ));
    assert_eq!(octo.step((26, Direction::PosZ)), (44, Direction::PosZ));
    assert_eq!(octo.step((27, Direction::PosZ)), (1, Direction::NegX));
    assert_eq!(octo.step((28, Direction::PosZ)), (34, Direction::PosZ));
    assert_eq!(octo.step((29, Direction::PosZ)), (30, Direction::PosZ));
    assert_eq!(octo.step((30, Direction::PosZ)), (4, Direction::NegX));
    assert_eq!(octo.step((31, Direction::PosZ)), (42, Direction::PosZ));
    assert_eq!(octo.step((32, Direction::PosZ)), (33, Direction::PosZ));
    assert_eq!(octo.step((33, Direction::PosZ)), (40, Direction::PosZ));
    assert_eq!(octo.step((34, Direction::PosZ)), (35, Direction::PosZ));
    assert_eq!(octo.step((35, Direction::PosZ)), (71, Direction::PosZ));
    assert_eq!(octo.step((36, Direction::PosZ)), (63, Direction::PosY));
    assert_eq!(octo.step((37, Direction::PosZ)), (66, Direction::PosY));
    assert_eq!(octo.step((38, Direction::PosZ)), (65, Direction::PosY));
    assert_eq!(octo.step((39, Direction::PosZ)), (38, Direction::PosZ));
    assert_eq!(octo.step((40, Direction::PosZ)), (71, Direction::PosY));
    assert_eq!(octo.step((41, Direction::PosZ)), (70, Direction::PosY));
    assert_eq!(octo.step((42, Direction::PosZ)), (41, Direction::PosZ));
    assert_eq!(octo.step((43, Direction::PosZ)), (37, Direction::PosZ));
    assert_eq!(octo.step((44, Direction::PosZ)), (43, Direction::PosZ));
    assert_eq!(octo.step((45, Direction::PosZ)), (36, Direction::PosY));
    assert_eq!(octo.step((46, Direction::PosZ)), (39, Direction::PosY));
    assert_eq!(octo.step((47, Direction::PosZ)), (38, Direction::PosY));
    assert_eq!(octo.step((48, Direction::PosZ)), (47, Direction::PosZ));
    assert_eq!(octo.step((49, Direction::PosZ)), (44, Direction::PosY));
    assert_eq!(octo.step((50, Direction::PosZ)), (43, Direction::PosY));
    assert_eq!(octo.step((51, Direction::PosZ)), (50, Direction::PosZ));
    assert_eq!(octo.step((52, Direction::PosZ)), (46, Direction::PosZ));
    assert_eq!(octo.step((53, Direction::PosZ)), (52, Direction::PosZ));
    assert_eq!(octo.step((54, Direction::PosZ)), (45, Direction::PosY));
    assert_eq!(octo.step((55, Direction::PosZ)), (48, Direction::PosY));
    assert_eq!(octo.step((56, Direction::PosZ)), (47, Direction::PosY));
    assert_eq!(octo.step((57, Direction::PosZ)), (56, Direction::PosZ));
    assert_eq!(octo.step((58, Direction::PosZ)), (53, Direction::PosY));
    assert_eq!(octo.step((59, Direction::PosZ)), (52, Direction::PosY));
    assert_eq!(octo.step((60, Direction::PosZ)), (59, Direction::PosZ));
    assert_eq!(octo.step((61, Direction::PosZ)), (55, Direction::PosZ));
    assert_eq!(octo.step((62, Direction::PosZ)), (61, Direction::PosZ));
    assert_eq!(octo.step((63, Direction::PosZ)), (54, Direction::PosY));
    assert_eq!(octo.step((64, Direction::PosZ)), (57, Direction::PosY));
    assert_eq!(octo.step((65, Direction::PosZ)), (56, Direction::PosY));
    assert_eq!(octo.step((66, Direction::PosZ)), (65, Direction::PosZ));
    assert_eq!(octo.step((67, Direction::PosZ)), (62, Direction::PosY));
    assert_eq!(octo.step((68, Direction::PosZ)), (61, Direction::PosY));
    assert_eq!(octo.step((69, Direction::PosZ)), (68, Direction::PosZ));
    assert_eq!(octo.step((70, Direction::PosZ)), (64, Direction::PosZ));
    assert_eq!(octo.step((71, Direction::PosZ)), (70, Direction::PosZ));
    assert_eq!(octo.step((0, Direction::NegZ)), (27, Direction::NegY));
    assert_eq!(octo.step((1, Direction::NegZ)), (30, Direction::NegY));
    assert_eq!(octo.step((2, Direction::NegZ)), (29, Direction::NegY));
    assert_eq!(octo.step((3, Direction::NegZ)), (2, Direction::NegZ));
    assert_eq!(octo.step((4, Direction::NegZ)), (35, Direction::NegY));
    assert_eq!(octo.step((5, Direction::NegZ)), (34, Direction::NegY));
    assert_eq!(octo.step((6, Direction::NegZ)), (5, Direction::NegZ));
    assert_eq!(octo.step((7, Direction::NegZ)), (1, Direction::NegZ));
    assert_eq!(octo.step((8, Direction::NegZ)), (7, Direction::NegZ));
    assert_eq!(octo.step((9, Direction::NegZ)), (0, Direction::NegY));
    assert_eq!(octo.step((10, Direction::NegZ)), (3, Direction::NegY));
    assert_eq!(octo.step((11, Direction::NegZ)), (2, Direction::NegY));
    assert_eq!(octo.step((12, Direction::NegZ)), (11, Direction::NegZ));
    assert_eq!(octo.step((13, Direction::NegZ)), (8, Direction::NegY));
    assert_eq!(octo.step((14, Direction::NegZ)), (7, Direction::NegY));
    assert_eq!(octo.step((15, Direction::NegZ)), (14, Direction::NegZ));
    assert_eq!(octo.step((16, Direction::NegZ)), (10, Direction::NegZ));
    assert_eq!(octo.step((17, Direction::NegZ)), (16, Direction::NegZ));
    assert_eq!(octo.step((18, Direction::NegZ)), (9, Direction::NegY));
    assert_eq!(octo.step((19, Direction::NegZ)), (12, Direction::NegY));
    assert_eq!(octo.step((20, Direction::NegZ)), (11, Direction::NegY));
    assert_eq!(octo.step((21, Direction::NegZ)), (20, Direction::NegZ));
    assert_eq!(octo.step((22, Direction::NegZ)), (17, Direction::NegY));
    assert_eq!(octo.step((23, Direction::NegZ)), (16, Direction::NegY));
    assert_eq!(octo.step((24, Direction::NegZ)), (23, Direction::NegZ));
    assert_eq!(octo.step((25, Direction::NegZ)), (19, Direction::NegZ));
    assert_eq!(octo.step((26, Direction::NegZ)), (25, Direction::NegZ));
    assert_eq!(octo.step((27, Direction::NegZ)), (18, Direction::NegY));
    assert_eq!(octo.step((28, Direction::NegZ)), (21, Direction::NegY));
    assert_eq!(octo.step((29, Direction::NegZ)), (20, Direction::NegY));
    assert_eq!(octo.step((30, Direction::NegZ)), (29, Direction::NegZ));
    assert_eq!(octo.step((31, Direction::NegZ)), (26, Direction::NegY));
    assert_eq!(octo.step((32, Direction::NegZ)), (25, Direction::NegY));
    assert_eq!(octo.step((33, Direction::NegZ)), (32, Direction::NegZ));
    assert_eq!(octo.step((34, Direction::NegZ)), (28, Direction::NegZ));
    assert_eq!(octo.step((35, Direction::NegZ)), (34, Direction::NegZ));
    assert_eq!(octo.step((36, Direction::NegZ)), (46, Direction::PosX));
    assert_eq!(octo.step((37, Direction::NegZ)), (43, Direction::NegZ));
    assert_eq!(octo.step((38, Direction::NegZ)), (39, Direction::NegZ));
    assert_eq!(octo.step((39, Direction::NegZ)), (49, Direction::PosX));
    assert_eq!(octo.step((40, Direction::NegZ)), (33, Direction::NegZ));
    assert_eq!(octo.step((41, Direction::NegZ)), (42, Direction::NegZ));
    assert_eq!(octo.step((42, Direction::NegZ)), (31, Direction::NegZ));
    assert_eq!(octo.step((43, Direction::NegZ)), (44, Direction::NegZ));
    assert_eq!(octo.step((44, Direction::NegZ)), (26, Direction::NegZ));
    assert_eq!(octo.step((45, Direction::NegZ)), (55, Direction::PosX));
    assert_eq!(octo.step((46, Direction::NegZ)), (52, Direction::NegZ));
    assert_eq!(octo.step((47, Direction::NegZ)), (48, Direction::NegZ));
    assert_eq!(octo.step((48, Direction::NegZ)), (58, Direction::PosX));
    assert_eq!(octo.step((49, Direction::NegZ)), (24, Direction::NegZ));
    assert_eq!(octo.step((50, Direction::NegZ)), (51, Direction::NegZ));
    assert_eq!(octo.step((51, Direction::NegZ)), (22, Direction::NegZ));
    assert_eq!(octo.step((52, Direction::NegZ)), (53, Direction::NegZ));
    assert_eq!(octo.step((53, Direction::NegZ)), (17, Direction::NegZ));
    assert_eq!(octo.step((54, Direction::NegZ)), (64, Direction::PosX));
    assert_eq!(octo.step((55, Direction::NegZ)), (61, Direction::NegZ));
    assert_eq!(octo.step((56, Direction::NegZ)), (57, Direction::NegZ));
    assert_eq!(octo.step((57, Direction::NegZ)), (67, Direction::PosX));
    assert_eq!(octo.step((58, Direction::NegZ)), (15, Direction::NegZ));
    assert_eq!(octo.step((59, Direction::NegZ)), (60, Direction::NegZ));
    assert_eq!(octo.step((60, Direction::NegZ)), (13, Direction::NegZ));
    assert_eq!(octo.step((61, Direction::NegZ)), (62, Direction::NegZ));
    assert_eq!(octo.step((62, Direction::NegZ)), (8, Direction::NegZ));
    assert_eq!(octo.step((63, Direction::NegZ)), (37, Direction::PosX));
    assert_eq!(octo.step((64, Direction::NegZ)), (70, Direction::NegZ));
    assert_eq!(octo.step((65, Direction::NegZ)), (66, Direction::NegZ));
    assert_eq!(octo.step((66, Direction::NegZ)), (40, Direction::PosX));
    assert_eq!(octo.step((67, Direction::NegZ)), (6, Direction::NegZ));
    assert_eq!(octo.step((68, Direction::NegZ)), (69, Direction::NegZ));
    assert_eq!(octo.step((69, Direction::NegZ)), (4, Direction::NegZ));
    assert_eq!(octo.step((70, Direction::NegZ)), (71, Direction::NegZ));
    assert_eq!(octo.step((71, Direction::NegZ)), (35, Direction::NegZ));
    Ok(())
}
fn auto_walk(size: usize) -> Result <(),String> {
    let octo = Octo::new(size);
    for d in 0..6 {
        for i in 0..(usize::pow(size, 2) * 8) {
            let start_tile = i;
            let start_direction = match d {
                0 => Direction::PosX,
                1 => Direction::PosY,
                2 => Direction::PosZ,
                3 => Direction::NegX,
                4 => Direction::NegY,
                _ => Direction::NegZ,
            };
            println!("start: {} {:?}", start_tile, start_direction);
            let mut current = octo.step((start_tile, start_direction.clone()));
            while current.0 != start_tile {
                println!("step {}:{:?}", i, current);
                current = octo.step(current);
            }
            assert_eq!(current, (start_tile, start_direction));
        }
    }
    Ok(())
}
#[test]
fn test_walk_size_1() -> Result <(),String> {
    assert_eq!(auto_walk(1),Ok(()));
    Ok(())
}#[test]
fn test_walk_size_2() -> Result <(),String> {
    assert_eq!(auto_walk(2),Ok(()));
    Ok(())
}#[test]
fn test_walk_size_3() -> Result <(),String> {
    assert_eq!(auto_walk(3),Ok(()));
    Ok(())
}#[test]
fn test_walk_size_4() -> Result <(),String> {
    assert_eq!(auto_walk(4),Ok(()));
    Ok(())
}#[test]
fn test_walk_size_5() -> Result <(),String> {
    assert_eq!(auto_walk(5),Ok(()));
    Ok(())
}